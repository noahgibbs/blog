<% title "Rails3 Refactor It in Steps: Part Two" %>

<% shell = "shell-unix-generic".to_sym %>

<h1> Building Refactor It, a Rails3 App, in Steps </h1>

<h2> Part Two: Nested Resources </h2>

<p>
  The idea of "Refactor It", such as it is, is that users can
  submit a snippet, and other users can suggest refactorings.
</p>

<p>
  That suggests a simple data architecture:  snippet objects
  contain refactoring objects, they're represented by simple
  ActiveRecord models.  So let's do that.
</p>

<p>
  It'll be quicker to build these things with scaffolds, so
  let's do that.  Rails 3 generators use the "rails generate"
  command, which has nice help:
</p>

<% harsh :format => shell, :lines => true do %>
angelbob@dell-desktop:~/src/rails/refactor$ rails generate scaffold 
Usage:
  rails generate scaffold NAME [field:type field:type] [options]

Options:
      [--singleton]               # Supply to create a singleton controller
  -c, --scaffold-controller=NAME  # Scaffold controller to be invoked
                                  # Default: scaffold_controller
  -y, [--stylesheets]             # Indicates when to generate stylesheets
                                  # Default: true
      [--force-plural]            # Forces the use of a plural ModelName
  -o, --orm=NAME                  # Orm to be invoked
                                  # Default: active_record

ScaffoldController options:
  -t, [--test-framework=NAME]   # Test framework to be invoked
                                # Default: test_unit
  -e, [--template-engine=NAME]  # Template engine to be invoked
                                # Default: erb
      [--helper]                # Indicates when to generate helper
                                # Default: true

Runtime options:
  -q, [--quiet]    # Supress status output
  -s, [--skip]     # Skip files that already exist
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist

TestUnit options:
      [--fixture]                   # Indicates when to generate fixture
                                    # Default: true
  -r, [--fixture-replacement=NAME]  # Fixture replacement to be invoked

ActiveRecord options:
  [--migration]      # Indicates when to generate migration
                     # Default: true
  [--parent=PARENT]  # The parent class for the generated model
  [--timestamps]     # Indicates when to generate timestamps
                     # Default: true

Description:
    Create rails files for scaffold generator.
<% end %>

<p>
  From there, we can generate the snippet and refactor objects:
</p>

<% harsh :format => shell, :lines => true do %>
angelbob@dell-desktop:~/src/rails/refactor$ rails generate scaffold snippet title:string body:text notes:text language:string user_id:integer karma:integer
      invoke  active_record
      create    db/migrate/20100701022620_create_snippets.rb
      create    app/models/snippet.rb
      invoke    test_unit
      (Cut for length...)
      create        test/unit/helpers/snippets_helper_test.rb
      invoke  stylesheets
      create    public/stylesheets/scaffold.css
angelbob@dell-desktop:~/src/rails/refactor$ rails generate scaffold refactoring body:text comment:text snippet_id:integer language:string user_id:integer karma:integer
      invoke  active_record
      create    db/migrate/20100701030608_create_refactorings.rb
      create    app/models/refactoring.rb
      invoke    test_unit
      (Cut for length...)
      create        test/unit/helpers/refactorings_helper_test.rb
      invoke  stylesheets
   identical    public/stylesheets/scaffold.css
<% end %>

<p>
  That's fine -- let's look at the migrations that Rails set up for
  us.  Here's the one for snippets, after I've added a couple of
  quick options:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
class CreateSnippets < ActiveRecord::Migration
  def self.up
    create_table :snippets do |t|
      t.string :title
      t.text :body
      t.text :notes
      t.string :language
      t.integer :user_id, :null => false
      t.integer :karma, :default => 0

      t.timestamps
    end
  end

  def self.down
    drop_table :snippets
  end
end
<% end %>

<p>
  Looks good.  I also set the snippet_id to not null in the refactoring
  model, and the karma to default to 0.  You can do that too, or not.
</p>

<p>
  Now we have a couple of nice models for this, and a simple scaffolding
  to create and edit each of them.  Open up config/routes.rb, and you'll
  see "resources" lines for each of them.  You'll want to change the
  sequential lines into a very simple nested block:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
  resources :snippets do
    resources :refactorings
  end
<% end %>

<p>
  Now refactorings will be nested inside snippets.  Not in the database,
  of course, but the URLs will be written that way.  Let's have a look.
  Run your app by typing "rails server" in your app's directory.  Open
  a web browser to "http://localhost:3000/snippets".
</p>

<p>
  Looks great, doesn't it?  No?  You have an error, instead?  One like
  this?
</p>

<img class="screenshot" src="/images/refactor_no_migrate.png" alt="An error!" />

<p>
  Guess we need to actually <i>run</i> those migrations.  Let's do that.
</p>

<% harsh :format => shell, :lines => true do %>
angelbob@dell-desktop:~/src/rails/refactor$ rake db:migrate
(in /home/angelbob/src/rails/refactor)
==  CreateSnippets: migrating =================================================
-- create_table(:snippets)
   -> 0.0019s
==  CreateSnippets: migrated (0.0020s) ========================================

==  CreateRefactorings: migrating =============================================
-- create_table(:refactorings)
   -> 0.0018s
==  CreateRefactorings: migrated (0.0019s) ====================================
<% end %>

<p>
  Now hit reload in the browser?  Better?
</p>

<img class="screenshot" src="/images/refactor_snippet_listing.png"
     alt="a listing of snippets" />

<p>
  Excellent.  Now we can create a new snippet.  Right now there's
  no security on anything, so don't worry about the user and login
  stuff we did last time.
</p>

<img class="screenshot" src="/images/refactor_edit_snippet.png"
     alt="editing a new snippet" />

<p>
  And now we've created it...
</p>

<img class="screenshot" src="/images/refactor_snippet_created.png"
     alt="created a new snippet" />

<p>
  We're now viewing the new snippet.  Look at the URL:
  "http://localhost:3000/snippets/1".  Go ahead and change
  that to
  "http://localhost:3000/snippets/1/refactorings".  Got an
  error like this?
</p>

<img class="screenshot" src="/images/refactor_error_refactorings.png"
     alt="no such method error" />

<p>
  Now we'll see what we need to do to make nested resources work.
  First off, we can't just use a "new_refactoring_path" like
  the scaffold tried to do.  We have to specify a snippet as
  well, since that's part of it.  And that means we'll want to get
  the snippet also, so let's make that happen.
</p>

<p>
  When we created the refactoring model, we gave it a snippet_id.
  Now we'll open app/models/refactoring.rb and use that and some
  other things:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
class Refactoring < ActiveRecord::Base
  belongs_to :snippet
  belongs_to :user

  validates_presence_of :snippet_id
end
<% end %>

<p>
  And we should modify Snippet as well:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
class Snippet < ActiveRecord::Base
  has_many :refactors
  belongs_to :user

  validates_presence_of :user_id
end
<% end %>

<p>
  By making refactoring belong to snippet, we can say
  refactoring.snippet to get the snippet for a particular refactoring.
  And then snippet has many refactorings, so we can say
  snippet.refactorings to get a list of the refactorings of that
  snippet.  And just as we pair up "refactoring belongs_to snippet"
  with "snippet has_many refactorings", we should open up the
  user model (remember it from last time?)...  And we'll add some
  validations while we're in there, just so the user doesn't
  type utter nonsense for the email address or the username.
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
class User < ActiveRecord::Base
  has_many :snippets
  has_many :refactors

  # Include default devise modules. Others available are:
  # :token_authenticatable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable,
         :confirmable, :lockable, :timeoutable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :username

  validates_uniqueness_of :email
  validates_uniqueness_of :username
  validates_format_of :email, :with => /\A[^@\s]+@[^@\s]+\Z/
  validates_format_of :username, :with => /^([a-z0-9_-]|\s)+$/i
  validates_length_of :username, :within => 2..20
end
<% end %>

<p>
  Good stuff.  But we still can't just load those views.  We need
  to change them to use the correct routes.  Let's start with
  app/views/refactorings/index.html.erb.
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
    <td><%%= link_to 'Show', refactoring %></td>
    <td><%%= link_to 'Edit', edit_refactoring_path(refactoring) %></td>
    <td><%%= link_to 'Destroy', refactoring, :confirm => 'Are you sure?', :method => :delete %></td>
  </tr>
<%% end %>
</table>

<br />

<%%= link_to 'New Refactoring', new_refactoring_path %>
<% end %>

<p>
  In the parts above, from the end of index.html.erb, you'll need to
  change just using the refactoring to providing a good link for it.
  You'll also need to change the refactoring paths to snippet_refactoring
  paths.  After doing that, you'll get the following changes:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
    <td><%%= link_to 'Show', snippet_refactoring_path(@snippet, refactoring) %></td>
    <td><%%= link_to 'Edit', edit_snippet_refactoring_path(@snippet, refactoring) %></td>
    <td><%%= link_to 'Destroy', snippet_refactoring_path(@snippet, refactoring), :confirm => 'Are you sure?', :method => :delete %></td>
  </tr>
<%% end %>
</table>

<br />

<%%= link_to 'New Refactoring', new_snippet_refactoring_path(@snippet) %>
<% end %>

<p>
  That works, right?  No?  You got an error that looks suspiciously like
  we never set @snippet?  Oh.  That's no good.  I guess we didn't.  So
  open up the refactorings_controller, and we'll fix that.
</p>

<p>
  Go ahead and add the line "before_filter :capture_snippet" up at the
  top.  Now we just need to write that function:
</p>

<% harsh :format => :ruby_on_rails, :lines => true do %>
  def capture_snippet
    @snippet = Snippet.find(params[:snippet_id]) if params[:snippet_id]
  end
<% end %>

<p>
  Now hit reload in your browser and hey presto, you've got a nice
  little listing of (no) refactorings for this snippet.  You'll need
  to fix the views for the other actions in the same way, but you're
  well on your way.  The remaining non-obvious thing you'll need to do
  is in the form partial for refactorings
  (app/views/refactorings/_form.html.erb).  Notice the line that
  says "form_for(@refactoring)"?  That's not going to work with
  a nested resource.  Luckily, we can just change it to
  "form_for([@refactoring.snippet, @refactoring])" and Rails will
  figure out how to turn it into a URL.  So do that, and then try
  creating a new refactor of the snippet.
</p>

<p>
  You changed all the paths in new.html and show.html to use
  the snippet_refactoring stuff, yeah?  You can get rid of those links
  or fix them, but you have to do something if you don't want them to
  cause errors.  You can see how I patched them up in the
  <a href="http://github.com/noahgibbs/refactor_it_tutorial">GitHub
  repository</a> if you need help.
</p>
